WebService: Um webservice é tipo um correio digital que troca ideia entre sistemas diferentes pela internet

Ele recebe um pedido (tipo: "me manda os dados do usuário tal") e responde com os dados certinho, na moral. E o papo é sempre num formato padrãozão, tipo JSON ou XML, pra todo mundo entender, mesmo que os sistemas sejam diferentes.

Tem uns tipos mais famosinhos, tipo:

- REST (mais moderninho, suave, usa HTTP que nem site normal)

- SOAP (mais chato, cheio das formalidade, mas firmeza pra umas empresa mais zicada que curte segurança e padrão)

MÉTODOS
GET - POST - DELETE - PUT

DIVISÃO PROJETO
domain - criar entidades

STATUS CODES HTTP
1xx - Informativo
100 Continue: Pode mandar o resto...
101 Switching Protocols: Tô mudando o esquema, aguarde

2xx - Sucesso
200: OK
201 Created: Criado
204 No Content: Tudo tranquilo, mas não tem nada pra mostrar

3xx - Redirecionamento
301 Moved Permanently: Agora tá em outro canto
302: Em outro lugar, por enquanto
304: Não mudou, usa o que tu já tem

4xx - Erro do cliente
400 Bad Request: Pedido zuado, vê aí o que tu mandou.
401 Unauthorized: Nem vem, tu não tem permissão.
403 Forbidden: Tu até tá logado, mas não pode ver isso aqui.
404 Not Found: Essa porra não existe, foi mal.
429 Too Many Requests: Devagar aí, cê tá pedindo demais!

5xx - Erro do servidor
500 Internal Server Error: Deu ruim aqui dentro, nem sei o que foi.
502 Bad Gateway: A resposta veio errada de outro canto.
503 Service Unavailable: Tamo fora do ar, tenta depois.
504 Gateway Timeout: O outro servidor não respondeu a tempo.

	//Dependendo do método que a gente usar ele vai ser redirecionado para um canto específico, use o PostMan para testar
	@GetMapping //Ele herdou a configuração da classe acima, por isso não foi mapeado
	public String get() { //Usado só para ver algo sem mudar nada
		return "Get Spring Boot";
	}
	
	@PostMapping() //Geralmente usado para formulário, passa os parâmetros no corpo da requisição, diferente do GET que passa na URL
	public String post() { //Mudar dados pro servidor
		return "Post Spring Boot";
	}
	
	@PutMapping() //Atualizar dados, mas funciona igual o POST
	public String put() { //Atualizar tudo, substituir
		return "Put Spring Boot";
	}
	
	@DeleteMapping() //Deletar registros
	public String delete() {
		return "Delete Spring Boot";
	}
	
	------------------------------------------------------------------------------------------------------------
	
		@GetMapping("/login") //Não é recomendado passar senha e login por esse método, use o POST
	public String login(@RequestParam("login") String login, @RequestParam("senha")String senha) {
		return "login" + login + ", senha: " + senha;
	}
	
	//Testa esse método com http://localhost:8080/login?login=ricardo&senha=abc
	
	------------------------------------------------------------------------------------------------------------
	
	PASSANDO E LIGANDO MÉTODO COM O PATH VARIABLE
	
		@GetMapping("/login/{login}/senha/{senha}")
	public String login(@PathVariable("login") String login, @PathVariable("senha")String senha) {
		return "login: " + login + ", senha: " + senha;
	}
	
	//Testa com a URL http://localhost:8080/login/ricardo/senha/123
	
	------------------------------------------------------------------------------------------------------------
	
		@GetMapping("/carros/{id}")
	public String getCarroById(@PathVariable("id") Long id) {
		return "Carro by id " + id;
	}
	
	@GetMapping("/carros/tipo/{tipo}")
	public String getCarroByTipo(@PathVariable("tipo") String tipo) {
		return "Lista de Carros " + tipo;
	}
	
	//Testa com:
	//http://localhost:8080/carros/tipo/1
	//http://localhost:8080/carros/1
	
	------------------------------------------------------------------------------------------------------------
	
		@PostMapping("/login")
	public String login(@RequestParam("login") String login, @RequestParam("senha")String senha) {
		return "Login " + login + ", senha: " + senha;
	}
	
	//Testa no PostMan usando o método POST para enviar junto com os valores das variáveis login e senha
}

	------------------------------------------------------------------------------------------------------------

	@PostMapping
	public String post(@RequestBody Carro carro) { //RequestBody converte o json carro para o objeto carro
		Carro c = service.save(carro);
		
		return "Carro  salvo com sucesso: " + c.getId();
	}

	// Para testar vá no PostMan -> insere a url do http://localhost:8080/api/v1/carros -> Em "Headers" adiciona a key para "Content-Type" e o Value para "application/json" -> Agora vai na aba do body e insere esse valor:

{
    "nome": "Golf MK3 1993",
    "tipo": "classicos"
}

Dá um send e verifica se apareceu a mensagem: Carro  salvo com sucesso: 34

	------------------------------------------------------------------------------------------------------------
	
	Testa o método PUT da mesma forma

	
	
	
